setwd("C:\Users\Amit\OneDrive\1 - GWU MSBA\DNSC 6217 BA Practicum\My Folder")
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
library(RSQLite)
con <- dbConnect(dbDriver("SQLite"),"nih.db")
dbGetQuery(con, "view tables;")
dbGetQuery(con, "show tables;")
con <- dbConnect(dbDriver("SQLite"),"nih_analyses.db")
dbGetQuery(con, "show tables;")
con <- dbConnect(dbDriver("SQLite"),"nih_analyses.db")
dbGetQuery(con, "show tables;")
studyDF <- read.csv("/Data/2017-03-20/study_author_pub.csv", header = TRUE)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
studyDF <- read.csv("/Data/2017-03-20/study_author_pub.csv", header = TRUE)
studyDF <- read.csv("Data/2017-03-20/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-20/comp_author_pub.csv", header = TRUE)
View(compDF)
View(studyDF)
studyAuthPub <- cbind(studyDF$full_name, studyDF$publication_key)
View(studyAuthPub)
View(studyAuthPub)
studyAuthPub <- cbind.data.frame(studyDF$full_name, studyDF$publication_key)
View(studyAuthPub)
studyAuthPub <- unique.data.frame(studyAuthPub)
View(studyAuthPub)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
studyDF <- read.csv("Data/2017-03-20/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-20/comp_author_pub.csv", header = TRUE)
studyAuthPub <- unique.data.frame(studyAuthPub)
studyAuthPub <- cbind.data.frame(studyDF$full_name, studyDF$publication_key)
studyAuthPub <- unique.data.frame(studyAuthPub)
View(studyAuthPub)
install.packages("Matrix")
View(studyAuthPub)
studyAuthPub(1)
studyAuthPub[1]
studyAuthPub[2]
df <- studyAuthPub
library('Matrix')
A <- spMatrix(nrow=length(unique(df[1])),
ncol=length(unique(df[2])),
i = as.numeric(factor(df[1])),
j = as.numeric(factor(df[2])),
x = rep(1, length(as.numeric(df[1]))) )
row.names(A) <- levels(factor(df[1]))
colnames(A) <- levels(factor(df[2]))
A
A <- spMatrix(nrow=length(unique(df[1])),
ncol=length(unique(df[2])),
i = as.numeric(factor(df[1])),
j = as.numeric(factor(df[2])),
x = rep(1, length(as.numeric(df[1]))) )
A <- spMatrix(nrow=length(unique(df[1])),
ncol=length(unique(df[2])),
i = as.numeric(factor(df[1])),
j = as.numeric(factor(df[2])),
x = rep(1, length((df[1]))) )
A <- spMatrix(nrow=length(unique(df[1])),
ncol=length(unique(df[2])),
i = as.numeric(factor(df[1])),
j = as.numeric(factor(df[2])),
x = rep(1, length(as.numeric(df[1]))) )
row.names(A) <- levels(factor(df[1]))
colnames(A) <- levels(factor(df[2]))
A
A <- spMatrix(nrow=length(unique(df[1])),
ncol=length(unique(df[2])),
i = as.numeric(factor(df[1])),
j = as.numeric(factor(df[2])),
x = rep(1, length(as.numeric(df[1]))) )
write.csv(studyAuthPub,"Data/2017-03-20/study_list.csv")
studyEdgeList <- cbind(studyAuthPub[, 1], c(studyAuthPub[, -1]))
studyEdgeList <- as.data.frame(cbind(studyAuthPub[, 1], c(studyAuthPub[, -1])))
View(studyEdgeList)
m <- as.matrix(studyAuthPub)
studyEdgeList <- cbind(m[, 1], c(m[, -1]))
m[,1]
m <- as.matrix(studyAuthPub)
studyEdgeList <- cbind(m[, 1], c(m[, 2]))
View(studyEdgeList)
View(m)
View(studyAuthPub)
rename(studyAuthPub, c("name","publication"))
library(plyr)
rename(studyAuthPub, c("name","publication"))
rename(studyAuthPub, c("studyDF$full_name"="name", "studyDF$publication_key"="publication"))
View(studyAuthPub)
rename(studyAuthPub, c("studyDF$full_name"="name", "studyDF$publication_key"="publication"))
names(studyAuthPub)[1] <- "full_name"
names(studyAuthPub)[2] <- "publication_key"
x <- xtabs(~publication_key+full_name, unique(studyAuthPub));
mm <- crossprod(x,x)
mm[lower.tri(mm, TRUE)] <- NA
View(mm)
x <- xtabs(~publication_key+full_name, unique(studyAuthPub));
mm <- crossprod(x,x)
x <- xtabs(~publication_key+full_name, unique(studyAuthPub));
studyAM <- crossprod(x,x)
View(studyAM)
library(igraph)
install.packages("igraph")
library(igraph)
g <- graph.adjacency(x)
g <- graph.adjacency(studyAM)
get.edgelist(g)
mm[lower.tri(mm, TRUE)] <- NA
studyAM <- crossprod(x,x)
studyAM[lower.tri(studyAM, TRUE)] <- NA
g <- graph.adjacency(studyAM)
get.edgelist(g)
plot(g)
plot(g, label = NA)
plot(g, vertex.label = NA)
plot(g, vertex.label = NA, edge.arrow.size=.2)
plot(g, vertex.label = NA, edge.arrow.size=NA)
plot(g, vertex.label = NA, edge.arrow=NA)
g <- as.undirected(g)
plot(g, vertex.label = NA, edge.arrow=NA)
plot(g, vertex.label = NA)
plot(g, vertex.label = NA, vertex.size = .1)
plot(g, vertex.label = NA, vertex.size = .5)
plot(g, vertex.label = NA, vertex.size = 1)
plot(g, vertex.label = NA, vertex.size = 1, edge.size = 1)
plot(g, vertex.label = NA, vertex.size = 5)
plot(g, vertex.label = NA, vertex.size = 5, edge.weight = 1)
plot(g, vertex.label = NA, vertex.size = 5, edge.width = 1)
plot(g, vertex.label = NA, vertex.size = 5, edge.width = 3)
plot(g, vertex.label = NA, vertex.size = 5, edge.width = 4)
plot(g, vertex.label = NA, vertex.size = 3, edge.width = 2)
plot(g, layout=circle, vertex.label = NA, vertex.size = 3, edge.width = 2)
plot(g, layout=layout.circle(), vertex.label = NA, vertex.size = 3, edge.width = 2)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 3, edge.width = 2)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 3, edge.width = 1)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 3, edge.width = .2)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 3, edge.width = .1)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 1, edge.width = .05)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(g, layout=layout.fruchterman.reingold(), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(g, layout=layout.fruchterman.reingold(g), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(g, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 2, edge.width = .01)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
studyDF <- read.csv("Data/2017-03-20/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-20/comp_author_pub.csv", header = TRUE)
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
library(igraph)
studyAM <- authPubToAdj(studyDF)
g <- graph.adjacency(studyAM)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM)
studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM)
compNet <- as.undirected(compNet)
plot(studyNet, vertex.label = NA, vertex.size = 3, edge.width = 2)
plot(studyNet, layout=layout_in_circle(g), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(studyNet, layout=layout.fruchterman.reingold(studyNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(compNet, layout=layout.fruchterman.reingold(compNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(studyNet, layout=layout.fruchterman.reingold(studyNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
### Network Plots
library(igraph)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM)
studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM)
compNet <- as.undirected(compNet)
plot(studyNet, layout=layout.fruchterman.reingold(studyNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(compNet, layout=layout.fruchterman.reingold(compNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
studyDF
studyDF[2]
studyDF$full_name
unique(studyDF$full_name)
unique(compDF$full_name)
fullDF <- rbind(studyDF,compDF)
fullAM <- authPubToAdj(fullDF)
fullNet <- graph.adjacency(fullAM)
fullNet <- as.undirected(fullNet)
plot(fullNet, layout=layout.fruchterman.reingold(compNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
unique(fullDF$full_name)
unique(stuydDF$full_name)
unique(studyDF$full_name)
unique(compDF$full_name)
studyEL <- get.edgelist(studyNet)
View(studyEL)
write.csv(studyEL,"studyEL.csv")
studyEL <- get.edgelist(studyNet)
write.csv(studyEL,"study_edgelist.csv", row.names = FALSE)
compEL <- get.edgelist(compNet)
write.csv(compEL,"comp_edgelist.csv", row.names = FALSE)
fullEL <- get.edgelist(fullNet)
write.csv(fullEL,"full_edgelist.csv", row.names = FALSE)
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
View(studyDF)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
#### FUNCTIONS
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
#### OPERATIONS
### Import Data
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
fullDF <- rbind(studyDF,compDF)
### Network Plots
library(igraph)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM)
studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM)
compNet <- as.undirected(compNet)
fullAM <- authPubToAdj(fullDF)
fullNet <- graph.adjacency(fullAM)
fullNet <- as.undirected(fullNet)
View(compAM)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE)
E(studyNet)$weight
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = .01,
edge.width=E(net)$weight)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = .01,
edge.width=E(studyNet)$weight)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width=E(studyNet)$weight)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = E(studyNet)$weight)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = .02)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
#### FUNCTIONS
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
# adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
#### OPERATIONS
### Import Data
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
fullDF <- rbind(studyDF,compDF)
### Network Plots
library(igraph)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = .02)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = E(studyNet)$weight)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = E(studyNet)$weight/10)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = E(studyNet)$weight/5)
E(studyNet)
V(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
V(studyNet)$color = "red"
# studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
V(compNet)$color = "blue"
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
V(studyNet)$color = "red"
# studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
V(compNet)$color = "blue"
# compNet <- as.undirected(compNet)
fullNet = graph.union(studyNet, compNet, byname=TRUE)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color,
edge.width = E(studyNet)$weight/5)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/5)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout_as_tree(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout_as_circle(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout_as_circle(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout.auto(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
V(fullNet)$color <- ifelse(answers[V(fullNet), 2] == 1, "blue", "red")
fullNet = graph.union(studyNet, compNet, byname=TRUE)
plot(fullNet,
layout=layout.auto(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout.auto(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
# layout=layout.auto(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/10)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/7)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
# adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
fullDF <- rbind(studyDF,compDF)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
fullNet = graph.union(studyNet, compNet, byname=TRUE)
library(igraph)
library(igraph)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
# V(studyNet)$color = "red"
# studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
# V(compNet)$color = "blue"
# compNet <- as.undirected(compNet)
fullNet = graph.union(studyNet, compNet, byname=TRUE)
plot(studyNet,
layout=layout.fruchterman.reingold(studyNet),
vertex.label = NA,
vertex.size = 2,
edge.width = E(studyNet)$weight/5)
plot(fullNet,
layout=layout.fruchterman.reingold(fullNet),
vertex.label = NA,
vertex.size = 2,
vertex.color=V(fullNet)$color_1,
edge.width = E(studyNet)$weight/7)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
fullNet = graph.union(studyNet, compNet, byname=TRUE)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
#### FUNCTIONS
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
# adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
#### OPERATIONS
### Import Data
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
fullDF <- rbind(studyDF,compDF)
### Network Plots
library(igraph)
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
# V(studyNet)$color = "red"
# studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
# V(compNet)$color = "blue"
# compNet <- as.undirected(compNet)
fullNet = graph.union(studyNet, compNet, byname=TRUE)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
fullAM <- authPubToAdj(fullDF)
fullNet <- graph.adjacency(fullAM)
fullNet <- as.undirected(fullNet)
setwd("C:/Users/Amit/OneDrive/1 - GWU MSBA/DNSC 6217 BA Practicum/My Folder")
#### FUNCTIONS
authPubToAdj <- function(df){
authPub <- cbind.data.frame(df$full_name, df$publication_key)
authPub <- unique.data.frame(authPub)
names(authPub)[1] <- "full_name"
names(authPub)[2] <- "publication_key"
# http://stackoverflow.com/questions/39502424/r-weighted-adjacency-matrix-from-two-columns
x <- xtabs(~publication_key+full_name, unique(authPub));
adjMatrix <- crossprod(x,x)
# adjMatrix[lower.tri(adjMatrix, TRUE)] <- NA
return(adjMatrix)
}
studyDF <- read.csv("Data/2017-03-22/study_author_pub.csv", header = TRUE)
compDF <- read.csv("Data/2017-03-22/comp_author_pub.csv", header = TRUE)
fullDF <- rbind(studyDF,compDF)
fullAM <- authPubToAdj(fullDF)
fullNet <- graph.adjacency(fullAM)
fullNet <- as.undirected(fullNet)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
fullNet <- graph.adjacency(fullAM,mode="undirected",weighted=TRUE, diag=FALSE)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(fullNet, layout=layout_as_tree(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
plot(fullNet, layout=layout.fruchterman.reingold(fullNet), vertex.label = NA, vertex.size = 2, edge.width = .01)
V(studyNet)
V(studyNet)$name
V(studyNet)$name
studyAM <- authPubToAdj(studyDF)
studyNet <- graph.adjacency(studyAM,mode="undirected",weighted=TRUE, diag=FALSE)
# V(studyNet)$color = "red"
# studyNet <- as.undirected(studyNet)
compAM <- authPubToAdj(compDF)
compNet <- graph.adjacency(compAM,mode="undirected",weighted=TRUE, diag=FALSE)
V(studyNet)
